<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="   
           http://www.springframework.org/schema/beans   
           http://www.springframework.org/schema/beans/spring-beans-4.2.xsd   
           http://www.springframework.org/schema/context   
           http://www.springframework.org/schema/context/spring-context-4.2.xsd  
           http://www.springframework.org/schema/mvc   
           http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">
	<!-- <context:annotation-config /> -->
	<!-- 把标记了@Controller注解的类转换为bean -->
	<context:component-scan base-package="cn.vfire.framework" />

	<!-- 开启spring mvc注解驱动，元素属性说明如下：
		**enable-matrix-variables=Boolean：矩阵变量**
			复杂例子：
			```URL
			~/cars;color=red;year=2012 多个变量可以使用“;”（分号）分隔。
			~/cars;color=red,green,blue 一个变量的多个值那么可以使用“,”（逗号）分隔。
			~/cars;color=red;color=green;color=blue 可以使用重复的变量名。
			```
			```JAVA 
			// GET /owners/42;q=11/pets/21;q=22  
			@RequestMapping(value = "/owners/{ownerId}/pets/{petId}", method = RequestMethod.GET)  
			public voidfindPet(@MatrixVariable(value="q", pathVar="ownerId") intq1,  
							@MatrixVariable(value="q", pathVar="petId") intq2) {  
				// q1 == 11  
				// q2 == 22  
			}
			// GET /pets/42  
			@RequestMapping(value = "/pets/{petId}", method = RequestMethod.GET)  
			public voidfindPet(@MatrixVariable(required=true, defaultValue="1") intq) {  
			// q == 1  
			}
			
			
		**conversion-service=Bean：对前端向后端提交数据格式转化服务**
			Spring中默认通过FormattingConversionServiceFactoryBean工厂Bean获取所有的数据转化处理器对象converters，
			 所以如果需要自定义前端与后端参数之间的数据转化只需要重新注册该工厂Bean，然后通过converters属性追加自定义的converters转化对象。
			自定义的converters类需要实现org.springframework.core.convert.converter.Converter<S,T>接口,
			 其中泛型S为源数据类型，泛型T为目标数据类型。
			例子：
			```XML spring-mvc.xml
			<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager" conversion-service="conversionService" >
			<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
				<property name="converters">
					<list>
						<bean class="cn.vfire.framework.spring.mvc.converter.StringToPhoneNumberConverter">
					</list>
				</property>
			</bean>
			```
			
			```JAVA spring Controller
			//URL http://127.0.0.1:8000/say2?phoneNumber=010-12345678
			@RequestMapping(value = "/say2")
			public Map<String, Object> say2(DataTestModel msg) {
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("name", "xiaohong");
				map.put("cname", "小红");
				map.put("msg", msg.toString());
				return map;
			}
			```
			```JAVA Model
			public class DataTestModel {
				@Getter
				@Setter
				private PhoneNumberModel phoneNumber;// String->自定义对象的转换测试
			}
			
			public class PhoneNumberModel {
			
				/** 区号 */
				@Getter
				@Setter
				private String areaCode;
			
				/** 电话号 */
				@Getter
				@Setter
				private String phoneNumber;
			}
			```
			```JAVA Spring My Converter
			public class StringToPhoneNumberConverter implements Converter<String, PhoneNumberModel> {
				Pattern pattern = Pattern.compile("^(\\d{3,4})-(\\d{7,8})$");
				public PhoneNumberModel convert(String source) {
					if (!StringUtils.hasLength(source)) {
						// ①如果source为空 返回null
						return null;
					}
					Matcher matcher = pattern.matcher(source);
					if (matcher.matches()) {
						// ②如果匹配 进行转换
						PhoneNumberModel phoneNumber = new PhoneNumberModel();
						phoneNumber.setAreaCode(matcher.group(1));
						phoneNumber.setPhoneNumber(matcher.group(2));
						return phoneNumber;
					} else {
						// ③如果不匹配 转换失败
						throw new IllegalArgumentException(String.format("类型转换失败，需要格式[010-12345678]，但格式是[%s]", source));
					}
				}
			}
			```
		
		**validator:Spring mvc对数据校验**
		方法一使用hibernate-validator的校验。
		使用spring mvc 对控制器中模型数据最校验，首先引入javax.validation的validation-api.jar,参见maven。
		```XML mavne
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>1.1.0.Final</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>5.2.4.Final</version>
		</dependency>
		```
		开启spring mvc注解驱动即可。
		```XML spring mvc
		<mvc:annotation-driven />
		```
		
		
		
		
		
		
	-->

	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager"
		conversion-service="conversionService" />

	<!-- 设置默认的Servlet来响应静态文件 -->
	<mvc:default-servlet-handler />
	<mvc:resources mapping="/resource" location="/resource"></mvc:resources>

	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<list>
				<bean class="cn.vfire.framework.spring.mvc.converter.StringToPhoneNumberConverter" />
			</list>
		</property>
	</bean>

	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />

	<!-- 设置freeMarker的配置文件路径 -->
	<bean id="freemarkerConfiguration" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<!--注释掉的下方代码是指引freemarker的基本信息的配置位置，因为我已经将配置信息移到了applicationContext文件下，所以这里就没必要存在了，不注释也不会有问题的 -->
		<!--<property name="location" value="classpath:/WEB-INF/config/freemarker.properties" /> -->
	</bean>

	<bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="order" value="2" />
		<property name="exposeRequestAttributes" value="true" />
		<property name="exposeSessionAttributes" value="true" />
		<property name="viewClass">
			<value>org.springframework.web.servlet.view.freemarker.FreeMarkerView</value>
		</property>
		<property name="cache">
			<value>true</value>
		</property>
		<!--这里需要注意一下，我注释了下面这样一行代码，这行代码的意思就是指引freemarker需要解析的文件的位置。注释掉原因是因为 applicationContext.xml里有这样一行代码：<property name="templateLoaderPath"
			value="/WEB-INF/views/" /> 已经指定了视图位置。如果我们这里依然保留下方代码，页面回报406的找不到的错误 -->
		<!--<property name="prefix"><value>/WEB-INF/views/</value></property> -->
		<property name="suffix">
			<value>.html</value>
		</property>
		<property name="contentType">
			<value>text/html; charset=UTF-8</value>
		</property>
	</bean>

	<!--1、检查扩展名（如my.pdf）；2、检查Parameter（如my?format=pdf）；3、检查Accept Header -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
		<property name="favorPathExtension" value="true" />
		<!-- 用于开启 /userinfo/123?format=json 的支持 -->
		<property name="favorParameter" value="true" />
		<property name="parameterName" value="format" />
		<!-- 是否忽略Accept Header -->
		<property name="ignoreAcceptHeader" value="false" />
		<property name="mediaTypes"> <!--扩展名到MIME的映射；favorPathExtension, favorParameter是true时起作用 -->
			<value>
				json=application/json
				xml=application/xml
			</value>
		</property>
		<!-- 默认的content type -->
		<property name="defaultContentType" value="text/html" />
	</bean>


	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1" />
		<property name="useNotAcceptableStatusCode" value="true" />
		<!-- 内容协商管理器 用于决定media type -->
		<property name="contentNegotiationManager" ref="contentNegotiationManager" />
		<!-- 
		<property name="viewResolvers" value="cn.vfire.framework.spring.mvc.view.JsonViewResolver" />
		 -->
	</bean>

	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/say" />
			<bean class="cn.vfire.framework.spring.mvc.interceptor.TestHandlerInterceptorAdapter" />
		</mvc:interceptor>
	</mvc:interceptors>

	<!--这里为可选项 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="utf-8" />




</beans>